#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* head = NULL;

// ================= Insertions =================
void insertAtBeginning(int val) {
    Node* newNode = new Node{val, head};
    head = newNode;
}

void insertAtEnd(int val) {
    Node* newNode = new Node{val, NULL};
    if(head==NULL) {
        head=newNode;
        return;
    }
    Node* temp=head;
    while(temp->next!=NULL) temp=temp->next;
    temp->next=newNode;
}

void insertBefore(int key, int val) {
    if(head==NULL) return;
    if(head->data==key) {
        insertAtBeginning(val);
        return;
    }
    Node* temp=head;
    while(temp->next && temp->next->data!=key) temp=temp->next;
    if(temp->next==NULL) {
        cout<<"Key not found\n"; return;
    }
    Node* newNode=new Node{val,temp->next};
    temp->next=newNode;
}

void insertAfter(int key, int val) {
    Node* temp=head;
    while(temp && temp->data!=key) temp=temp->next;
    if(temp==NULL) { cout<<"Key not found\n"; return; }
    Node* newNode=new Node{val,temp->next};
    temp->next=newNode;
}

// ================= Deletions =================
void deleteBeginning() {
    if(head==NULL) { cout<<"List Empty\n"; return; }
    Node* temp=head;
    head=head->next;
    delete temp;
}

void deleteEnd() {
    if(head==NULL) { cout<<"List Empty\n"; return; }
    if(head->next==NULL) {
        delete head; head=NULL; return;
    }
    Node* temp=head;
    while(temp->next->next!=NULL) temp=temp->next;
    delete temp->next;
    temp->next=NULL;
}

void deleteNode(int key) {
    if(head==NULL) return;
    if(head->data==key) {
        Node* temp=head;
        head=head->next;
        delete temp;
        return;
    }
    Node* temp=head;
    while(temp->next && temp->next->data!=key) temp=temp->next;
    if(temp->next==NULL) { cout<<"Key not found\n"; return; }
    Node* del=temp->next;
    temp->next=temp->next->next;
    delete del;
}

// ================= Other Ops =================
void searchNode(int key) {
    Node* temp=head;
    int pos=1;
    while(temp) {
        if(temp->data==key) {
            cout<<"Found at position "<<pos<<endl;
            return;
        }
        temp=temp->next; pos++;
    }
    cout<<"Not found\n";
}

void displayList() {
    Node* temp=head;
    if(!temp) { cout<<"List Empty\n"; return; }
    while(temp) {
        cout<<temp->data<<" -> ";
        temp=temp->next;
    }
    cout<<"NULL\n";
}

// ================= 2. Count & Delete Occurrences =================
void countAndDelete(int key) {
    int count=0;
    while(head && head->data==key) { Node* del=head; head=head->next; delete del; count++; }
    Node* temp=head;
    while(temp && temp->next) {
        if(temp->next->data==key) {
            Node* del=temp->next;
            temp->next=temp->next->next;
            delete del; count++;
        } else temp=temp->next;
    }
    cout<<"Count: "<<count<<endl;
    cout<<"Updated List: "; displayList();
}

// ================= 3. Find Middle =================
void findMiddle() {
    if(head==NULL) { cout<<"List Empty\n"; return; }
    Node* slow=head; Node* fast=head;
    while(fast && fast->next) {
        slow=slow->next;
        fast=fast->next->next;
    }
    cout<<"Middle element: "<<slow->data<<endl;
}

// ================= 4. Reverse List =================
void reverseList() {
    Node* prev=NULL; Node* curr=head; Node* next=NULL;
    while(curr) {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    head=prev;
    cout<<"Reversed List: "; displayList();
}

// ================= MAIN MENU =================
int main() {
    int choice,val,key,pos;
    do {
        cout<<"\n==== LINKED LIST MENU ====\n";
        cout<<"1. Insert at Beginning\n2. Insert at End\n3. Insert Before Key\n4. Insert After Key\n";
        cout<<"5. Delete Beginning\n6. Delete End\n7. Delete Specific Node\n";
        cout<<"8. Search Node\n9. Display List\n10. Count & Delete Occurrences\n";
        cout<<"11. Find Middle\n12. Reverse List\n13. Exit\nChoice: ";
        cin>>choice;
        switch(choice) {
            case 1: cout<<"Enter value: ";cin>>val; insertAtBeginning(val); break;
            case 2: cout<<"Enter value: ";cin>>val; insertAtEnd(val); break;
            case 3: cout<<"Enter key: ";cin>>key; cout<<"Enter value: ";cin>>val; insertBefore(key,val); break;
            case 4: cout<<"Enter key: ";cin>>key; cout<<"Enter value: ";cin>>val; insertAfter(key,val); break;
            case 5: deleteBeginning(); break;
            case 6: deleteEnd(); break;
            case 7: cout<<"Enter key: ";cin>>key; deleteNode(key); break;
            case 8: cout<<"Enter key: ";cin>>key; searchNode(key); break;
            case 9: displayList(); break;
            case 10: cout<<"Enter key: ";cin>>key; countAndDelete(key); break;
            case 11: findMiddle(); break;
            case 12: reverseList(); break;
            case 13: cout<<"Exiting...\n"; break;
            default: cout<<"Invalid choice!\n";
        }
    } while(choice!=13);
    return 0;
}
